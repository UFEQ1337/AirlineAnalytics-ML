"""
Modu≈Ç do analizy europejskich wzorc√≥w op√≥≈∫nie≈Ñ lotniczych.
Dostosowany do specyfiki ruchu lotniczego w Europie z fokusem na Polskƒô.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# Konfiguracja polskich font√≥w
plt.rcParams['font.family'] = ['DejaVu Sans']

def analyze_polish_routes(df):
    """Analiza tras z i do Polski"""
    print("üáµüá± ANALIZA POLSKICH TRAS LOTNICZYCH")
    print("="*60)
    
    # Filtruj loty z/do Polski
    polish_flights = df[(df['country_origin'] == 'Polska') | 
                       (df['country_destination'] == 'Polska')].copy()
    
    print(f"üìä Statystyki polskich po≈ÇƒÖcze≈Ñ:")
    print(f"   ‚Ä¢ ≈ÅƒÖczna liczba lot√≥w: {len(polish_flights):,}")
    print(f"   ‚Ä¢ Procent wszystkich lot√≥w: {len(polish_flights)/len(df)*100:.1f}%")
    print(f"   ‚Ä¢ ≈örednie op√≥≈∫nienie: {polish_flights['delay_minutes'].mean():.1f} min")
    print(f"   ‚Ä¢ Punktualno≈õƒá: {(polish_flights['delay_minutes'] == 0).mean()*100:.1f}%")
    
    # Top trasy z Polski
    polish_routes = polish_flights.copy()
    polish_routes['route'] = polish_routes['origin'] + ' ‚Üí ' + polish_routes['destination']
    top_routes = polish_routes['route'].value_counts().head(10)
    
    print(f"\nüõ´ Top 10 polskich tras:")
    for i, (route, count) in enumerate(top_routes.items(), 1):
        route_data = polish_flights[polish_flights['origin'] + ' ‚Üí ' + polish_flights['destination'] == route]
        avg_delay = route_data['delay_minutes'].mean()
        print(f"   {i:2d}. {route}: {count:,} lot√≥w, ≈õr. op√≥≈∫nienie {avg_delay:.1f} min")
    
    # Analiza polskich lotnisk
    polish_airports = ['WAW', 'KRK', 'GDN', 'WRO', 'KTW', 'POZ', 'RZE', 'LUZ']
    airport_stats = []
    
    for airport in polish_airports:
        airport_flights = df[(df['origin'] == airport) | (df['destination'] == airport)]
        if len(airport_flights) > 0:
            stats = {
                'Lotnisko': airport,
                'Liczba_lot√≥w': len(airport_flights),
                '≈örednie_op√≥≈∫nienie': airport_flights['delay_minutes'].mean(),
                'Punktualno≈õƒá_%': (airport_flights['delay_minutes'] == 0).mean() * 100
            }
            airport_stats.append(stats)
    
    airport_df = pd.DataFrame(airport_stats).sort_values('Liczba_lot√≥w', ascending=False)
    print(f"\nüè¢ Statystyki polskich lotnisk:")
    for _, row in airport_df.iterrows():
        print(f"   ‚Ä¢ {row['Lotnisko']}: {row['Liczba_lot√≥w']:,} lot√≥w, "
              f"≈õr. op√≥≈∫nienie {row['≈örednie_op√≥≈∫nienie']:.1f} min, "
              f"punktualno≈õƒá {row['Punktualno≈õƒá_%']:.1f}%")
    
    # Wizualizacja
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 12))
    
    # Top trasy
    top_routes.head(8).plot(kind='barh', ax=ax1, color='lightblue')
    ax1.set_title('Top 8 polskich tras', fontsize=14, fontweight='bold')
    ax1.set_xlabel('Liczba lot√≥w')
    
    # Por√≥wnanie polskich lotnisk
    airport_df.set_index('Lotnisko')['≈örednie_op√≥≈∫nienie'].plot(kind='bar', ax=ax2, color='orange')
    ax2.set_title('≈örednie op√≥≈∫nienia - polskie lotniska', fontsize=14, fontweight='bold')
    ax2.set_ylabel('≈örednie op√≥≈∫nienie (min)')
    ax2.tick_params(axis='x', rotation=45)
    
    # Rozk≈Çad op√≥≈∫nie≈Ñ dla lot√≥w polskich vs miƒôdzynarodowych
    polish_delays = polish_flights['delay_minutes']
    intl_delays = df[~((df['country_origin'] == 'Polska') | 
                      (df['country_destination'] == 'Polska'))]['delay_minutes']
    
    ax3.hist([polish_delays, intl_delays], bins=30, alpha=0.7, 
             label=['Loty polskie', 'Loty miƒôdzynarodowe'], color=['blue', 'orange'])
    ax3.set_title('Rozk≈Çad op√≥≈∫nie≈Ñ: Polska vs miƒôdzynarodowe')
    ax3.set_xlabel('Op√≥≈∫nienie (min)')
    ax3.set_ylabel('Liczba lot√≥w')
    ax3.legend()
    ax3.set_xlim(0, 120)
    
    # Punktualno≈õƒá wed≈Çug miesiƒôcy
    monthly_punctuality = polish_flights.groupby('month').apply(
        lambda x: (x['delay_minutes'] == 0).mean() * 100
    )
    monthly_punctuality.plot(kind='line', marker='o', ax=ax4, color='green', linewidth=2)
    ax4.set_title('Punktualno≈õƒá polskich lot√≥w wed≈Çug miesiƒôcy')
    ax4.set_xlabel('MiesiƒÖc')
    ax4.set_ylabel('Punktualno≈õƒá (%)')
    ax4.set_xticks(range(1, 13))
    ax4.set_xticklabels(['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze',
                        'Lip', 'Sie', 'Wrz', 'Pa≈∫', 'Lis', 'Gru'])
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return polish_flights, airport_df

def analyze_european_carriers(df):
    """Analiza europejskich przewo≈∫nik√≥w"""
    print("\n‚úàÔ∏è  ANALIZA EUROPEJSKICH PRZEWO≈πNIK√ìW")
    print("="*60)
    
    # Statystyki przewo≈∫nik√≥w
    carrier_stats = df.groupby('airline').agg({
        'delay_minutes': ['count', 'mean', lambda x: (x == 0).mean() * 100],
        'distance_km': 'mean'
    }).round(1)
    
    carrier_stats.columns = ['Liczba_lot√≥w', '≈örednie_op√≥≈∫nienie', 'Punktualno≈õƒá_%', '≈öredni_dystans']
    carrier_stats = carrier_stats.sort_values('Liczba_lot√≥w', ascending=False)
    
    print("üìà Top 10 przewo≈∫nik√≥w wed≈Çug liczby lot√≥w:")
    for i, (airline, row) in enumerate(carrier_stats.head(10).iterrows(), 1):
        print(f"   {i:2d}. {airline}")
        print(f"       ‚Ä¢ Lot√≥w: {row['Liczba_lot√≥w']:,}")
        print(f"       ‚Ä¢ ≈ör. op√≥≈∫nienie: {row['≈örednie_op√≥≈∫nienie']:.1f} min")
        print(f"       ‚Ä¢ Punktualno≈õƒá: {row['Punktualno≈õƒá_%']:.1f}%")
        print(f"       ‚Ä¢ ≈ör. dystans: {row['≈öredni_dystans']:.0f} km")
    
    # Analiza LOT-u vs konkurencji
    if 'LOT Polish Airlines' in df['airline'].values:
        lot_stats = carrier_stats.loc['LOT Polish Airlines']
        other_carriers = carrier_stats[carrier_stats.index != 'LOT Polish Airlines']
        
        print(f"\nüáµüá± LOT Polish Airlines vs konkurencja:")
        print(f"   ‚Ä¢ LOT - punktualno≈õƒá: {lot_stats['Punktualno≈õƒá_%']:.1f}%")
        print(f"   ‚Ä¢ Konkurencja - ≈õrednia punktualno≈õƒá: {other_carriers['Punktualno≈õƒá_%'].mean():.1f}%")
        print(f"   ‚Ä¢ LOT - ≈õrednie op√≥≈∫nienie: {lot_stats['≈örednie_op√≥≈∫nienie']:.1f} min")
        print(f"   ‚Ä¢ Konkurencja - ≈õrednie op√≥≈∫nienie: {other_carriers['≈örednie_op√≥≈∫nienie'].mean():.1f} min")
    
    # Wizualizacja
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 12))
    
    # Top przewo≈∫nicy wed≈Çug liczby lot√≥w
    top_carriers = carrier_stats.head(8)
    top_carriers['Liczba_lot√≥w'].plot(kind='bar', ax=ax1, color='skyblue')
    ax1.set_title('Top 8 przewo≈∫nik√≥w - liczba lot√≥w')
    ax1.set_ylabel('Liczba lot√≥w')
    ax1.tick_params(axis='x', rotation=45)
    
    # Punktualno≈õƒá vs liczba lot√≥w
    ax2.scatter(carrier_stats['Liczba_lot√≥w'], carrier_stats['Punktualno≈õƒá_%'], 
               alpha=0.7, s=100, color='orange')
    ax2.set_title('Punktualno≈õƒá vs liczba lot√≥w')
    ax2.set_xlabel('Liczba lot√≥w')
    ax2.set_ylabel('Punktualno≈õƒá (%)')
    ax2.grid(True, alpha=0.3)
    
    # ≈örednie op√≥≈∫nienie wed≈Çug przewo≈∫nika
    top_carriers['≈örednie_op√≥≈∫nienie'].plot(kind='bar', ax=ax3, color='lightcoral')
    ax3.set_title('≈örednie op√≥≈∫nienie - top przewo≈∫nicy')
    ax3.set_ylabel('≈örednie op√≥≈∫nienie (min)')
    ax3.tick_params(axis='x', rotation=45)
    
    # Rozk≈Çad typ√≥w op√≥≈∫nie≈Ñ dla low-cost vs tradycyjnych
    low_cost = ['Ryanair', 'Wizz Air', 'easyJet', 'Norwegian']
    traditional = ['LOT Polish Airlines', 'Lufthansa', 'KLM', 'Air France', 'British Airways']
    
    low_cost_delays = df[df['airline'].isin(low_cost)]['delay_minutes']
    traditional_delays = df[df['airline'].isin(traditional)]['delay_minutes']
    
    ax4.hist([low_cost_delays, traditional_delays], bins=30, alpha=0.7,
             label=['Low-cost', 'Tradycyjne'], color=['red', 'blue'])
    ax4.set_title('Rozk≈Çad op√≥≈∫nie≈Ñ: Low-cost vs Tradycyjne')
    ax4.set_xlabel('Op√≥≈∫nienie (min)')
    ax4.set_ylabel('Liczba lot√≥w')
    ax4.legend()
    ax4.set_xlim(0, 100)
    
    plt.tight_layout()
    plt.show()
    
    return carrier_stats

def analyze_european_weather_patterns(df):
    """Analiza wzorc√≥w pogodowych w Europie"""
    print("\nüå¶Ô∏è  EUROPEJSKIE WZORCE POGODOWE")
    print("="*60)
    
    weather_delays = df[df['delay_reason'] == 'Weather'].copy()
    
    if len(weather_delays) == 0:
        print("‚ùå Brak danych o op√≥≈∫nieniach pogodowych")
        return
    
    # Analiza sezonowa
    seasonal_weather = weather_delays.groupby('month').agg({
        'delay_minutes': ['count', 'mean']
    }).round(1)
    seasonal_weather.columns = ['Liczba_op√≥≈∫nie≈Ñ', '≈örednie_op√≥≈∫nienie']
    
    print("‚ùÑÔ∏è Sezonowo≈õƒá op√≥≈∫nie≈Ñ pogodowych:")
    seasons = {
        'Zima (Gru-Lut)': [12, 1, 2],
        'Wiosna (Mar-Maj)': [3, 4, 5], 
        'Lato (Cze-Sie)': [6, 7, 8],
        'Jesie≈Ñ (Wrz-Lis)': [9, 10, 11]
    }
    
    for season, months in seasons.items():
        season_data = seasonal_weather.loc[seasonal_weather.index.isin(months)]
        total_delays = season_data['Liczba_op√≥≈∫nie≈Ñ'].sum()
        avg_delay = season_data['≈örednie_op√≥≈∫nienie'].mean()
        print(f"   ‚Ä¢ {season}: {total_delays:,} op√≥≈∫nie≈Ñ, ≈õrednio {avg_delay:.1f} min")
    
    # Najbardziej problematyczne regiony
    regional_weather = weather_delays.groupby('country_origin').agg({
        'delay_minutes': ['count', 'mean']
    }).round(1)
    regional_weather.columns = ['Liczba_op√≥≈∫nie≈Ñ', '≈örednie_op√≥≈∫nienie']
    regional_weather = regional_weather.sort_values('Liczba_op√≥≈∫nie≈Ñ', ascending=False)
    
    print(f"\nüåç Problematyczne regiony pogodowo:")
    for country, row in regional_weather.head(8).iterrows():
        print(f"   ‚Ä¢ {country}: {row['Liczba_op√≥≈∫nie≈Ñ']:,} op√≥≈∫nie≈Ñ, "
              f"≈õrednio {row['≈örednie_op√≥≈∫nienie']:.1f} min")
    
    # Por√≥wnanie Polska vs Europa
    if 'Polska' in regional_weather.index:
        poland_weather = regional_weather.loc['Polska']
        europe_avg = regional_weather[regional_weather.index != 'Polska']['≈örednie_op√≥≈∫nienie'].mean()
        
        print(f"\nüáµüá± Polska vs Europa - op√≥≈∫nienia pogodowe:")
        print(f"   ‚Ä¢ Polska: {poland_weather['≈örednie_op√≥≈∫nienie']:.1f} min ≈õrednio")
        print(f"   ‚Ä¢ Europa (≈õrednia): {europe_avg:.1f} min ≈õrednio")
        print(f"   ‚Ä¢ R√≥≈ºnica: {poland_weather['≈örednie_op√≥≈∫nienie'] - europe_avg:+.1f} min")
    
    return seasonal_weather, regional_weather

def analyze_strike_delays(df):
    """Analiza op√≥≈∫nie≈Ñ zwiƒÖzanych ze strajkami (specyfika europejska)"""
    print("\n‚úä ANALIZA OP√ì≈πNIE≈É - STRAJKI (SPECYFIKA EUROPEJSKA)")
    print("="*60)
    
    strike_delays = df[df['delay_reason'] == 'Strike'].copy()
    
    if len(strike_delays) == 0:
        print("‚ùå Brak danych o op√≥≈∫nieniach zwiƒÖzanych ze strajkami")
        return
    
    print(f"üìä Og√≥lne statystyki strajk√≥w:")
    print(f"   ‚Ä¢ Liczba op√≥≈∫nie≈Ñ: {len(strike_delays):,}")
    print(f"   ‚Ä¢ Procent wszystkich op√≥≈∫nie≈Ñ: {len(strike_delays)/len(df[df['delay_minutes'] > 0])*100:.1f}%")
    print(f"   ‚Ä¢ ≈örednie op√≥≈∫nienie: {strike_delays['delay_minutes'].mean():.1f} min")
    
    # Najbardziej dotkniƒôte kraje
    country_strikes = strike_delays.groupby('country_origin').agg({
        'delay_minutes': ['count', 'mean']
    }).round(1)
    country_strikes.columns = ['Liczba_strajk√≥w', '≈örednie_op√≥≈∫nienie']
    country_strikes = country_strikes.sort_values('Liczba_strajk√≥w', ascending=False)
    
    print(f"\nüåç Kraje najbardziej dotkniƒôte strajkami:")
    for country, row in country_strikes.head(6).iterrows():
        print(f"   ‚Ä¢ {country}: {row['Liczba_strajk√≥w']:,} przypadk√≥w, "
              f"≈õrednio {row['≈örednie_op√≥≈∫nienie']:.1f} min")
    
    # Przewo≈∫nicy a strajki
    airline_strikes = strike_delays.groupby('airline').size().sort_values(ascending=False)
    print(f"\n‚úàÔ∏è Przewo≈∫nicy najbardziej dotkniƒôci strajkami:")
    for airline, count in airline_strikes.head(5).items():
        print(f"   ‚Ä¢ {airline}: {count:,} op√≥≈∫nie≈Ñ")
    
    return strike_delays, country_strikes

def create_european_summary_dashboard(df):
    """Tworzy podsumowanie analizy europejskiej"""
    print("\nüìã PODSUMOWANIE - EUROPEJSKI RUCH LOTNICZY")
    print("="*70)
    
    # Og√≥lne statystyki
    total_flights = len(df)
    avg_delay = df['delay_minutes'].mean()
    punctuality = (df['delay_minutes'] == 0).mean() * 100
    avg_distance = df['distance_km'].mean()
    
    print(f"üéØ KLUCZOWE METRYKI:")
    print(f"   ‚Ä¢ ≈ÅƒÖczna liczba lot√≥w: {total_flights:,}")
    print(f"   ‚Ä¢ ≈örednie op√≥≈∫nienie: {avg_delay:.1f} min")
    print(f"   ‚Ä¢ Punktualno≈õƒá: {punctuality:.1f}%")
    print(f"   ‚Ä¢ ≈öredni dystans: {avg_distance:.0f} km")
    
    # Top kraje
    country_stats = df.groupby('country_origin').agg({
        'delay_minutes': ['count', 'mean', lambda x: (x == 0).mean() * 100]
    }).round(1)
    country_stats.columns = ['Liczba_lot√≥w', '≈örednie_op√≥≈∫nienie', 'Punktualno≈õƒá_%']
    country_stats = country_stats.sort_values('Liczba_lot√≥w', ascending=False)
    
    print(f"\nüåç TOP 8 KRAJ√ìW WED≈ÅUG RUCHU:")
    for i, (country, row) in enumerate(country_stats.head(8).iterrows(), 1):
        print(f"   {i}. {country}: {row['Liczba_lot√≥w']:,} lot√≥w, "
              f"punktualno≈õƒá {row['Punktualno≈õƒá_%']:.1f}%")
    
    # Przyczyny op√≥≈∫nie≈Ñ
    delay_reasons = df[df['delay_minutes'] > 0]['delay_reason'].value_counts()
    delay_reasons_pct = (delay_reasons / delay_reasons.sum() * 100).round(1)
    
    print(f"\n‚è∞ PRZYCZYNY OP√ì≈πNIE≈É:")
    for reason, count in delay_reasons.items():
        pct = delay_reasons_pct[reason]
        print(f"   ‚Ä¢ {reason}: {count:,} ({pct}%)")
    
    # Rekomendacje
    print(f"\nüí° KLUCZOWE WNIOSKI I REKOMENDACJE:")
    
    # Najlepsze/najgorsze lotniska
    airport_performance = df.groupby('origin').agg({
        'delay_minutes': lambda x: (x == 0).mean() * 100
    }).round(1)
    airport_performance.columns = ['Punktualno≈õƒá_%']
    
    best_airports = airport_performance.nlargest(3, 'Punktualno≈õƒá_%')
    worst_airports = airport_performance.nsmallest(3, 'Punktualno≈õƒá_%')
    
    print(f"   ‚úÖ Najbardziej punktualne lotniska:")
    for airport, perf in best_airports.iterrows():
        print(f"      ‚Ä¢ {airport}: {perf['Punktualno≈õƒá_%']:.1f}% punktualno≈õci")
    
    print(f"   ‚ùå Lotniska wymagajƒÖce uwagi:")
    for airport, perf in worst_airports.iterrows():
        print(f"      ‚Ä¢ {airport}: {perf['Punktualno≈õƒá_%']:.1f}% punktualno≈õci")
    
    # Sezonowe rekomendacje
    seasonal_punctuality = df.groupby('month').apply(
        lambda x: (x['delay_minutes'] == 0).mean() * 100
    ).round(1)
    
    best_months = seasonal_punctuality.nlargest(3)
    worst_months = seasonal_punctuality.nsmallest(3)
    
    print(f"   üìÖ Najlepsze miesiƒÖce do podr√≥≈ºy:")
    months_names = ['', 'Stycze≈Ñ', 'Luty', 'Marzec', 'Kwiecie≈Ñ', 'Maj', 'Czerwiec',
                   'Lipiec', 'Sierpie≈Ñ', 'Wrzesie≈Ñ', 'Pa≈∫dziernik', 'Listopad', 'Grudzie≈Ñ']
    for month, punct in best_months.items():
        print(f"      ‚Ä¢ {months_names[month]}: {punct:.1f}% punktualno≈õci")
    
    print(f"   ‚ö†Ô∏è  MiesiƒÖce z wiƒôkszym ryzykiem op√≥≈∫nie≈Ñ:")
    for month, punct in worst_months.items():
        print(f"      ‚Ä¢ {months_names[month]}: {punct:.1f}% punktualno≈õci")
    
    return {
        'country_stats': country_stats,
        'delay_reasons': delay_reasons,
        'airport_performance': airport_performance,
        'seasonal_punctuality': seasonal_punctuality
    }

def run_complete_european_analysis(df):
    """Uruchamia kompletnƒÖ analizƒô europejskƒÖ"""
    print("üá™üá∫ ROZPOCZYNANIE KOMPLETNEJ ANALIZY EUROPEJSKIEJ")
    print("="*70)
    
    results = {}
    
    # Analiza tras polskich
    results['polish_analysis'] = analyze_polish_routes(df)
    
    # Analiza przewo≈∫nik√≥w
    results['carrier_analysis'] = analyze_european_carriers(df)
    
    # Analiza wzorc√≥w pogodowych
    results['weather_analysis'] = analyze_european_weather_patterns(df)
    
    # Analiza strajk√≥w
    results['strike_analysis'] = analyze_strike_delays(df)
    
    # Podsumowanie
    results['summary'] = create_european_summary_dashboard(df)
    
    print("\n‚úÖ ANALIZA EUROPEJSKA ZAKO≈ÉCZONA")
    print("="*70)
    
    return results 